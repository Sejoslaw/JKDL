package main.java.kd.jkdl.sql.core;

import java.sql.PreparedStatement;
import java.sql.SQLException;

import main.java.kd.jkdl.sql.api.ISQLDatabase;
import main.java.kd.jkdl.sql.api.ISQLParameterMetaData;
import main.java.kd.jkdl.sql.api.ISQLPreparedStatement;
import main.java.kd.jkdl.sql.api.ISQLTable;
import main.java.kd.jkdl.sql.api.ISQLTableMetaData;

/**
 * An object that represents a precompiled SQL statement.
 * 
 * @author <a href="mailto:k.dobrzynski94@gmail.com">Krzysztof Dobrzyñski</a> -> https://github.com/Sejoslaw
 * @see PreparedStatement
 */
public class SQLPreparedStatement implements ISQLPreparedStatement
{
	private final ISQLDatabase _database;
	private final PreparedStatement _statement;
	private final ISQLTableMetaData _tableMetaData;
	private final String _sqlCommand;
	private final String _tableName;
	
	public SQLPreparedStatement(ISQLDatabase db, PreparedStatement ps, String sqlCommand, String tableName) 
			throws SQLException 
	{
		this._database = db;
		this._statement = ps;
		this._tableMetaData = new SQLTableMetaData(this._statement.getMetaData());
		this._sqlCommand = sqlCommand;
		this._tableName = tableName;
	}
	
	@Deprecated
	public PreparedStatement getStatement()
	{
		return _statement;
	}
	
	/**
	 * @return Returns the Database from this statement.
	 * @see SQLDatabase
	 */
	public ISQLDatabase getDatabase()
	{
		return _database;
	}
	
	public ISQLTableMetaData getTableMetaData()
	{
		return _tableMetaData;
	}
	
	public String getSQLCommand()
	{
		return _sqlCommand;
	}
	
	public String getTableName()
	{
		return _tableName;
	}
	
	public ISQLParameterMetaData getParameterMetaData() 
			throws SQLException
	{
		return new SQLParameterMetaData(_statement.getParameterMetaData());
	}
	
	/**
	 * @return Executes the SQL query in this SQLPreparedStatement object and returns the 
	 * SQLTable object generated by the query.
	 * @throws SQLException
	 * @see SQLTable
	 */
	public ISQLTable executeQuery() 
			throws SQLException
	{
		return new SQLTable(_database, _statement.executeQuery(), _tableName);
	}
	
	/**
	 * @see PreparedStatement#executeUpdate()
	 */
	public int executeUpdate() 
			throws SQLException
	{
		return _statement.executeUpdate();
	}
}